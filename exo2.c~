#include<stdlib.h>
#include<stdio.h>
#include<pthread.h>
#include <unistd.h>

#define NBMAX 5
int mat[NBMAX][NBMAX];
int sum[NBMAX];

/*procedure d'intialisation de la matrice aleatoirement*/
void initialisationmatrice(int* mat[NBMAX][NBMAX]){
int i,j;
for( i=0; i<NBMAX; i++){
	for( j=0; j<NBMAX;j++){
		(int)mat[i][j]=rand()%10;

		}
		}
	}

/*procedure d'affichage de la matrice*/

void *affihagematrice(void * mat[NBMAX][NBMAX]){
int t[NBMAX][NBMAX];

int i,j;
for(i=0; i<NBMAX; i++){
	for(j=0; j<NBMAX;j++){
		t[i][j]=(int)mat[i][j]
		printf("%d | ",t[i][j]);

		}
		printf("\n");
		}


}

void somme(void * i){
int num_ligne= (intptr_t)i;

int j;
sum[num_ligne]=0;
for(j=0;j<NBMAX;j++){
    sum[num_ligne]+=mat[num_ligne][j];
    printf("la somme du thread %d de la ligne %d = %d",num_ligne,num_ligne,sum[num_ligne]);


}




}




int main(){


int i,j,create ,sum;
sum=0;
srand(time(NULL));
pthread_t thread_main, thread[NBMAX];
printf("Initialisation de la matrice : \n");

/*appel de la procedure d'intialisation de la matrice */
 initialisationmatrice(&mat[NBMAX][NBMAX]);

/*appel de la procedure qui affiche les elements de la matrice*/
affihagematrice(mat[NBMAX][NBMAX]);
/*procedure de creation de nbthread*/
for(i=0; i<NBMAX; i++){

        int creation=pthread_create(&thread[i], NULL,(void *)somme,(void *)(intptr_t)i);

        printf("Le thread main (Tid (0x)%x) vient de creer les %d threads:(0x)%x\n",  (int)thread_main, NBMAX, (int)thread[i]);
                 if(creation){
                     printf("Erreur de creation de thread %d\n",creation);
                     exit(0);
                      }
                      }



return 0;
}


